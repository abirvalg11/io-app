// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TosWebviewComponent The snapshot for the TosWebviewComponent Should render correctly with bottom footer and a basic placeholding HTML 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
        Object {},
      ]
    }
    testID="toSWebViewContainer"
  >
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          undefined,
        ]
      }
    >
      <RNCWebView
        androidCameraAccessDisabled={true}
        androidMicrophoneAccessDisabled={true}
        cacheEnabled={true}
        injectedJavaScript="const meta = document.createElement('meta');meta.setAttribute('content', 'width=device-width, initial-scale=0.99, maximum-scale=0.99, user-scalable=0');meta.setAttribute('name', 'viewport'); document.getElementsByTagName('head')[0].appendChild(meta);function findParent(tagname, el) {while (el) {if ((el.nodeName || el.tagName).toLowerCase() === tagname.toLowerCase()) {return el;}el = el.parentNode;}return null;}document.body.onclick = function(e) {e = e || event;const from = findParent(\\"a\\", e.target || e.srcElement);if (from) {const href = from.href;const message = {type: \\"LINK_MESSAGE\\",payload: {href}};window.ReactNativeWebView.postMessage(JSON.stringify(message));return false;}};true;"
        injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
        injectedJavaScriptForMainFrameOnly={true}
        javaScriptEnabled={true}
        messagingEnabled={true}
        onContentProcessDidTerminate={[Function]}
        onHttpError={[Function]}
        onLoadingError={[Function]}
        onLoadingFinish={[Function]}
        onLoadingProgress={[Function]}
        onLoadingStart={[Function]}
        onMessage={[Function]}
        onShouldStartLoadWithRequest={[Function]}
        source={
          Object {
            "html": "<html><head></head><body></body></html>",
          }
        }
        style={
          Array [
            Object {
              "flex": 1,
              "overflow": "hidden",
            },
            Object {
              "backgroundColor": "#ffffff",
            },
            Object {
              "flex": 1,
            },
          ]
        }
        textInteractionEnabled={true}
        textZoom={100}
        useSharedProcessPool={true}
      />
    </View>
  </View>
  <View
    pointerEvents="box-none"
    style={
      Object {
        "marginTop": -50,
        "overflow": "hidden",
        "paddingTop": 50,
        "width": "100%",
      }
    }
    testID="FooterWithButtons"
  >
    <View
      onLayout={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "#FFFFFF",
            "elevation": 20,
            "paddingHorizontal": 24,
            "shadowColor": "#0E0F13",
            "shadowOffset": Object {
              "height": 50,
              "width": 0,
            },
            "shadowOpacity": 0.5,
            "shadowRadius": 37,
          },
          Object {
            "paddingBottom": 16,
            "paddingTop": 16,
          },
        ]
      }
    >
      <View
        style={
          Object {
            "flexDirection": "row",
          }
        }
      >
        <View
          style={
            Object {
              "alignContent": "center",
              "flex": 1,
              "justifyContent": "center",
            }
          }
        >
          <View
            accessibilityLabel="Exit"
            accessibilityRole="button"
            accessibilityState={
              Object {
                "disabled": false,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={Object {}}
            testID="toSWebViewContainerFooterLeftButton"
          >
            <View
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "borderRadius": 4,
                    "elevation": 0,
                    "flexDirection": "row",
                    "justifyContent": "center",
                    "paddingHorizontal": 16,
                    "textAlignVertical": "center",
                  },
                  false,
                  Object {
                    "borderWidth": 1,
                  },
                  Object {
                    "height": 40,
                  },
                  false,
                  Object {
                    "backgroundColor": "rgba(0,115,230,0)",
                    "borderColor": "#0073E6",
                  },
                  Object {
                    "backgroundColor": undefined,
                    "borderColor": undefined,
                    "transform": Array [
                      Object {
                        "scale": undefined,
                      },
                    ],
                  },
                ]
              }
            >
              <Text
                accessibilityElementsHidden={true}
                accessible={false}
                allowFontScaling={false}
                ellipsizeMode="tail"
                importantForAccessibility="no-hide-descendants"
                maxFontSizeMultiplier={1.3}
                numberOfLines={1}
                style={
                  Array [
                    Object {
                      "fontFamily": "Titillium Web",
                      "fontStyle": "normal",
                      "fontWeight": "700",
                    },
                    Object {
                      "alignSelf": "center",
                    },
                    Object {
                      "color": "#0073E6",
                    },
                    Object {
                      "color": undefined,
                    },
                  ]
                }
              >
                Exit
              </Text>
            </View>
          </View>
        </View>
        <View
          style={
            Object {
              "width": 16,
            }
          }
        />
        <View
          style={
            Object {
              "alignContent": "center",
              "flex": 2,
            }
          }
        >
          <View
            accessibilityLabel="Accept and continue"
            accessibilityRole="button"
            accessibilityState={
              Object {
                "busy": false,
                "disabled": false,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={Object {}}
            testID="toSWebViewContainerFooterRightButton"
          >
            <View
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "borderRadius": 4,
                    "elevation": 0,
                    "flexDirection": "row",
                    "justifyContent": "center",
                    "paddingHorizontal": 16,
                    "textAlignVertical": "center",
                  },
                  Object {
                    "overflow": "hidden",
                  },
                  false,
                  Object {
                    "height": 40,
                  },
                  Object {
                    "backgroundColor": "#0073E6",
                  },
                  Object {
                    "backgroundColor": undefined,
                    "transform": Array [
                      Object {
                        "scale": undefined,
                      },
                    ],
                  },
                ]
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                      "justifyContent": "center",
                    },
                    false,
                  ]
                }
              >
                <Text
                  accessibilityElementsHidden={true}
                  accessible={false}
                  allowFontScaling={false}
                  color="white"
                  defaultColor="white"
                  defaultWeight="Bold"
                  ellipsizeMode="tail"
                  font="TitilliumWeb"
                  fontStyle={
                    Object {
                      "fontSize": 16,
                    }
                  }
                  importantForAccessibility="no-hide-descendants"
                  maxFontSizeMultiplier={1.3}
                  numberOfLines={1}
                  style={
                    Array [
                      Object {
                        "alignSelf": "center",
                      },
                      Object {
                        "fontSize": 16,
                      },
                      Object {
                        "color": "#FFFFFF",
                        "fontFamily": "Titillium Web",
                        "fontStyle": "normal",
                        "fontWeight": "700",
                      },
                    ]
                  }
                  weight="Bold"
                >
                  Accept and continue
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</RNCSafeAreaProvider>
`;
